#!/usr/bin/env python
"""Controller for various ports operations."""

from __future__ import absolute_import

import cProfile
import optparse
import os
import re
import signal
import sys
import traceback

from libpb import builder, env, event, log, mk, pkg, queue

VAR_NAME = "^[a-zA-Z_][a-zA-Z0-9_]*$"


class PortDelegate(object):
    """Choose if a port should be build and with which builder."""

    def __init__(self, package, upgrade):
        """Initialise port delegate."""
        self.package = package
        self.upgrade = upgrade

    def __call__(self, port):
        """Add a port to the required builder."""
        if isinstance(port, str):
            return
        port.flags.add("explicit")
        if self.upgrade:
            port.flags.add("upgrade")
        if self.package:
            port.flags.add("package")
        if env.flags["mode"] == "recursive" or not port.resolved():
            builder.depend_resolve(port)


def sigterm():
    """Kill subprocesses and die."""
    from libpb import stop

    stop(kill=True, kill_clean=True)
    raise SystemExit(254)


def sigint():
    """Ask politely for everything to stop at a convenient time."""
    from libpb import stop

    event.post_event(stop)
    event.event(signal.SIGINT, "s").disconnect(sigint).connect(sigterm)


def main():
    """The main event loop."""
    from libpb.env import flags
    from libpb.monitor import Top
    from libpb.port import get_port

    # Process arguments
    parser = gen_parser()
    options, args = parser.parse_args()
    options.args = args
    options.parser = parser
    set_early_options(options)
    if len(options.args) == 0 and not options.all and not options.ports_file:
        print parser.get_usage()
        return
    print "Loading /etc/make.conf (defaults)...",
    mk.load_defaults()
    print "done"
    print "Loading package datebase...",
    pkg.db.load()
    print "done"
    set_options(options)
    print "Caching variables...",
    mk.clean()
    mk.cache()
    print "done"

    # Make sure log_dir is available
    mkdir(flags["log_dir"])

    # Install signal handlers
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    event.event(signal.SIGINT, "s").connect(sigint)
    signal.signal(signal.SIGTERM, signal.SIG_IGN)
    event.event(signal.SIGTERM, "s").connect(sigterm)

    # Port delegate
    delegate = PortDelegate(options.package, options.upgrade)

    # Execute the primary build target
    for port in options.args:
        get_port(port).connect(delegate)

    if not flags["no_op_print"]:
        Top().start()
    if options.profile:
        cProfile.runctx("run_loop(options)", globals(),
                        locals(), options.profile)
    else:
        run_loop(options)


def mkdir(directory):
    """Make a given directory if needed."""
    if os.path.exists(directory):
        if not os.path.isdir(directory):
            print "%s: not a directory" % directory
            exit(1)
    else:
        try:
            base = os.path.dirname(directory)
            if os.path.exists(base):
                if not os.path.isdir(base):
                    print "%s: not a directory" % base
                else:
                    mkdir(base)
            os.mkdir(directory)
        except OSError, e:
            print "%s: unable to create directory (%s)" % (directory, e)
            exit(2)


def run_loop(options):
    """Run the main event loop, print nice messages if something goes wrong."""
    from libpb.event import run

    try:
        run()

        if options.no_opt_print:
            # All ports not configured, run all queues
            for q in queue.queues:
                q.load = 1
            run()
        report()
    except SystemExit:
        raise
    except BaseException:
        from libpb import stop

        msg = "".join(log.format_tb(tb, name) for tb, name in event.traceback())
        msg += traceback.format_exc()
        log.exception()

        event.post_event(stop)
        try:
            run()
        finally:
            report()
            sys.stderr.write(msg + "\n")

def report():
    """Print report about failed ports"""
    from libpb.port.port import Port
    from libpb.port import get_ports

    noport, failed, depends = [], [], []
    for port in get_ports():
        if not isinstance(port, Port):
            noport.append(port)
        elif port.dependency and port.dependency.failed:
            depends.append(port)
        elif port.dependent.failed:
            failed.append(port)

    noport.sort()
    failed.sort()
    depends.sort()

    if len(depends):
        def bad_depends(port):
            """Return all bad dependencies by pkgname."""
            for port in port.dependency.get():
                if not isinstance(port, Port):
                    yield port
                elif port.dependent.failed:
                    yield port.attr["pkgname"]
        print ("Failed due to dependency:\n\t%s" %
            "\n\t".join("%s (%s)" % (i.attr["pkgname"],
                                     ", ".join(bad_depends(i)))
                                                   for i in reversed(depends)))

    if len(failed):
        def bad_stacks(port):
            prev_stages = set(stage.prev for stage in port.stages if stage)
            tips = port.stages.difference(prev_stages)
            for stage in tips:
                if port.stacks[stage.stack].failed:
                    yield stage.name.lower()

        print ("Failed to complete port:\n\t%s" %
            "\n\t".join("%s (%s)" % (i.attr["pkgname"],
                                     ", ".join(bad_stacks(i)))
                                                    for i in reversed(failed)))

    if len(noport):
        print "No port found for:\n\t%s" % "\n\t".join(noport)


def gen_parser():
    """Create the options parser object."""
    usage = ("\t%prog [-abdnpruFNU] [-c CONFIG] [-C CHROOT] [-D variable] "
             "[-f PORTS_FILE] [-j J] [long-options] [variable=value] port ...")

    parser = optparse.OptionParser(usage, version="%prog 0.1.4.1")

    parser.add_option("-a", "--all", action="store_true", default=False,
                      help="Add all installed ports to the list (aka `pkg_info"
                      "-aoq`)")

    parser.add_option("--arch", action="store", type="string", default="",
                      help="Set the architecture environment variables (for "
                      "cross building)")

    # batch option supersedes config option
    parser.add_option("-b", "--batch", dest="batch", action="store_true",
                      default=False, help="Batch mode.  Skips the config "
                      "stage")

    parser.add_option("-c", "--config", action="callback", type="string",
                      callback=parse_config, help="Specify which ports to "
                      "configure (%s) [default: changed]" %
                      (", ".join(env.CONFIG)))

    parser.add_option("-C", dest="chroot", action="store", type="string",
                      default="", help="Build ports in chroot environment")

    parser.add_option("-d", "--debug", action="store_false", default=True,
                      help="Turn off extra diagnostic information (faster)")

    parser.add_option("-D", dest="make_env", action="append", default=[],
                      metavar="variable", help="Define the given variable for "
                      "make (i.e. add ``-D variable'' to the make calls)")

    parser.add_option("-f", "--ports-file", dest="ports_file", action="store",
                      type="string", default=False, help="Use ports from file")

    parser.add_option("-F", "--fetch-only", dest="fetch", action="store_true",
                      default=False, help="Only fetch the distribution files "
                      "for the ports")

    parser.add_option("-j", action="callback", type="string",
                      callback=parse_jobs, help="Set the queue loads [defaults:"
                      " attr=#CPU, checksum=CPU/2, fetch=1, build=CPU*2, "
                      "install=1, package=1]")

    parser.add_option("--method", action="store", type="string", default="",
                      help="Comma separated list of methods to resolve "
                      "dependencies (%s) [default: build]" %
                      (", ".join(env.METHOD),))

    parser.add_option("-n", dest="no_opt_print", action="store_true",
                      default=False, help="Display the commands that would "
                      "have been executed, but do not actually execute them.")

    parser.add_option("-N", dest="no_opt", action="store_true", default=False,
                      help="Do not execute any commands.")

    parser.add_option("--no-clean", dest="no_clean", default=False,
                      action="store_true", help="Do not clean a port after it "
                      "it has been installed/packaged.")

    parser.add_option("-p", "--package", action="store_true", default=False,
                      help="Create packages for specified ports.")

    parser.add_option("-P", "--package-all", dest="packageA", default=False,
                      action="store_true", help="Create packages for all "
                      "installed ports")

    parser.add_option("--pkgng", dest="pkgng", default=False,
                      action="store_true", help="Use pkgng as the package "
                      "manager.")

    parser.add_option("--preclean", dest="preclean", default=False,
                      action="store_true", help="Pre-clean before building a "
                      "port")

    parser.add_option("--profile", action="store", default=False,
                      type="string", help="Produce a profile of a run saved "
                      "to file PROFILE")

    parser.add_option("-u", "--upgrade", action="store_true", default=False,
                      help="Upgrade specified ports.")

    parser.add_option("-U", "--upgrade-all", dest="upgradeA", default=False,
                      action="store_true", help="Upgrade specified ports and "
                      "all its dependencies.")

    #parser.add_option("--index", action="store_true", default=False,
    #                  help="Create the INDEX file for the ports "
    #                  "infrastructure.")

    return parser


def set_early_options(options):
    """
    Set global options, required before calling initialising defaults from
    port's defaults.
    """
    # Add all -D options
    for i in options.make_env:
        if not re.match(VAR_NAME, i):
            options.parser.error("incorrectly formatted variable name: %s" % i)
        env.env[i] = True

    # Add other make env options (aka variable=value)
    for i in options.args[:]:
        if i.find('=') != -1:
            var, val = i.split('=', 1)
            if not re.match(VAR_NAME, var):
                options.parser.error("incorrectly formatted variable name: "
                                     "%s" % var)
            env.env[var] = val
            options.args.remove(i)

    # Set chroot environment
    if options.chroot:
        if options.chroot[-1] == '/':
            options.chroot = options.chroot[:-1]
        if not os.path.isdir(options.chroot):
            options.parser.error("chroot needs to be a valid directory")
        env.flags["chroot"] = os.path.join(os.getcwd(), options.chroot)
        if os.getuid() != 0:
            options.parser.error("chroot option only works with root account")
        env.flags["log_dir"] += options.chroot.replace("/", "__")

    # Use pkgng for ports-mgmt (--pkgng)
    if options.pkgng:
        env.env["WITH_PKGNG"] = "YES"


def set_options(options):
    """Set all the global options."""

    # Force 'none' config mode if in batch mode
    if options.batch:
        env.flags["config"] = "none"

    # Add all installed ports to port list
    if options.all:
        options.args.extend(pkg.db.db.keys())

    # Architecture flag
    if not options.arch and "ARCH" in os.environ:
        # Try prevent some foot shooting
        options.arch = os.environ["ARCH"]
    if options.arch:
        os.environ["ARCH"] = options.arch
        os.environ["UNAME_m"] = options.arch
        os.environ["UNAME_p"] = options.arch
        os.environ["MACHINE"] = options.arch
        os.environ["MACHTYPE"] = options.arch
        if options.arch == "i386" and "HAVE_COMPAT_IA32_KERN" in os.environ:
            del os.environ["HAVE_COMPAT_IA32_KERN"]

    # Debug mode
    if options.debug:
        env.flags["debug"] = True

    # Depend resolve methods
    if options.method:
        depend = [i.strip() for i in options.method.split(",")]
        for i in depend:
            if depend.count(i) > 1:
                options.parser.error("depend method specified multiple times")
            elif i not in env.METHOD:
                options.parser.error("unknown depend method")
        env.flags["method"] = depend

    # Fetch only options:
    if options.fetch:
        env.flags["fetch_only"] = True
        queue.checksum.load = env.CPUS
        if env.flags["target"][0] == "clean":
            env.flags["target"].pop(0)
        if env.flags["target"][-1] == "clean":
            env.flags["target"].pop()

    # Fetch ports list from file
    if options.ports_file:
        try:
            options.args.extend(read_port_file(options.ports_file))
        except IOError:
            options.parser.error("unable to open file: %s" % options.ports_file)

    # ! (-n & -N)
    if options.no_opt and options.no_opt_print:
        options.parser.error("-n and -N are mutually exclusive")

    # No operations and print (-n)
    if options.no_opt_print:
        env.flags["no_op"] = True
        env.flags["no_op_print"] = True
        # Configure all ports before printing commands
        for q in queue.queues[1:]:
            q.load = 0

    # No operations (-N)
    if options.no_opt:
        env.flags["no_op"] = True

    # Do not clean a port
    if options.no_clean and env.flags["target"][-1] == "clean":
        env.flags["target"].pop(-1)

    # Package all installed ports (-P)
    if options.packageA:
        if env.flags["target"].count("install"):
            idx = env.flags["target"].index("install")
            env.flags["target"][idx] = "package"
        options.package = True

    # Upgrade ports (-u)
    if options.upgrade and len(options.args) > 1:
        env.flags["mode"] = "recursive"

    # Upgrade all ports (-U)
    if options.upgradeA:
        env.flags["stage"] = max(env.flags["stage"], pkg.OLDER)
        env.flags["mode"] = "recursive"

    # Pre-clean before building ports
    if options.preclean and env.flags["target"][0] != "clean":
        env.flags["target"] = ["clean"] + env.flags["target"]

    # Profile option (--profile)
    if options.profile:
        options.profile = os.path.join(os.getcwd(), options.profile)


def read_port_file(ports_file):
    """Get ports from a file."""
    ports = []
    for i in open(ports_file, "r"):
        try:
            i = i[:i.index('#')]
        except ValueError:
            pass
        ports.extend(i.split())
    return ports


def parse_config(_option, _opt_str, value, _parser):
    """Set the config requirements."""
    if value not in env.CONFIG:
        raise optparse.OptionValueError("config must be one of (%s)" %
                                        (", ".join(env.CONFIG)))
    env.flags["config"] = value

def parse_jobs(_option, _opt_str, value, _parser):
    """Set the queue loads."""
    queues = {
            "attr":     queue.attr,
            "checksum": queue.checksum,
            "fetch":    queue.fetch,
            "build":    queue.build,
            "install":  queue.install,
            "package":  queue.package,
        }
    values = [i.split("=", 2) for i in value.split(",")]
    for i in values:
        if len(i) != 2:
            raise optparse.OptionValueError(
                                        "no queue load specified '%s'" % i[0])

    for name, num in values:
        for i in queues:
            if i.startswith(name):
                try:
                    queues[i].load = int(num)
                except ValueError:
                    raise optparse.OptionValueError(
                                            "unknown load for queue '%s'" % i)
                if queues[i].load <= 0:
                    raise optparse.OptionValueError(
                                          "queue must have load > 0 '%s'" % i)
                break
        else:
            raise optparse.OptionValueError("unknown queue '%s'" % name)


if __name__ == "__main__":
    main()
