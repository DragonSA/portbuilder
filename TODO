Coding standard:
 * Handle appropriate exceptions
 * Log all relevent events
 * Document all classes, methods, functions and (global|class) variables
 * Specify a public API (via __all___)

Future release:
 - Speed up port_version()
 - Add options for either individually executing make targets or in baulk
 - Allow KeyboardInterrupt to terminate program:
   - Get threads to terminate kindly
   - Allow double KeyboardInterrupt to kill all threads
   - Check if threads should be daemonised
 - Check spelling for all documentation
 - Define working standards for logging
 - Create proper statistical handling of data (with easy collection methods)
 - Increase level of logging
 - Have a base class (and simple API) to manage logged messages
 - Add all assertions
 - Add process effiecient version of subprocess
 - Prevent multiple fetches of the same file!!!
 - Remove invert as far as possible
 - Implement proper recording of ports installation (i.e. when they fail)
 - Refactor:
   - Break ports into its own libraries
   - Try isolate system and ports dependant code
 - pypkg:
   - Add -n option (only display commands, don't execute anything)
   - Add -j option (fine tune concurrency)
   - Add support for DESTDIR= and PREFIX=
 - Split port into its subcomponents:
   - Port
   - PortCache
   - DependHandler
   - System interface (and apply appropriate abstraction)
   - Develop proper API for the library
 - make:
   - Add a command prefix (such as for socksify?)
   - Add sudo support
 - Port:
   - Add distfiles checking (to optimise fetching)
   - Add support for DESTDIR= and PREFIX= (esp. with depends)
   - Allow switching for depends resolution (from complex to simple...)
   - Add caching for port information (with refreshing checks)
   - Handles ports that do not exist
   - Allow information collection from alternative sources
     (/var/db/pkg/* or portupgrade)
   - Add logging of port targets
   - Check need for status
   - Move prepare to a private method?
   - Move from flags to linear for stages
   - Use only one lock and condition for the port (should not cause too much
     contention since only a few instances will use it at once)
   - Offline cache of ports data
     - Handle changes in port config
     - Handle changes in port
       - date stamps
       - included Makefiles
   - Attributes:
     - Check for a need of PATCHFILES
     - ALWAYS_KEEP_DISTFILES
     - Extend attributes for NO_*
     - FORBIDDEN, BROKEN and IGNORE
     - ONLY_FOR_ARCHS and NOT_FOR_ARCHS
     - DEPRECIATION...
     - NO_BUILD option (and implement)
     - etc
   - Check all attributes are correctly formatted:
     - Port categories
     - Naming scheme
   - Handlers:
     - Provide output stream (as work in progress)
     - config:
       - Check for caching of options
       - Allow forcing of config options
       - Only reget attr if options have changed
     - fetch:
       - Add proxy support and changing the fetcher (e.g. wget)
       - Add a cache for fetching
     - install:
       - Update port install status properly
     - _prepare:
       - Add all dependants onto the queue and wait for them to complete
 - DependHandler:
    - Implement type specific checking (bin vs lib) [mimic ports]
    - Add callback feature to Port (when resolved status has changed)
    - Handle stale dependancies (with a dummy PortDepend)
    - Handle a port having failed and still satisfy its dependants
    - Add a handler to change our status (and notify all that is has)
    - Add a concurrent implementation (and probably a cache of sorts)
    - Allow a port to satisfy its dependants without state > Port.ABSENT or
      having failed
    - Make thread safe
    - When doing individual checks, cache as they can be duplicated
 - WorkerQueue:
    - Handle worker thread crashing
    - Allow a thread to indicate it has stalled (and create more to compensate)?
    - Add terminate and kill functions (to clean off threads)

0.0.8 - Milestone 8 (Finish command line controller):
 - Refine and condense code
 - Default to batch mode
 - Implement proper and complete logging (and comments)
 - Ensure thread safety
 - Vet the thread locking for deadlocks
 - Move variables from protected to private (were appropriate)

0.0.7 - Milestone 7 (Finish Target Builders):
 - Refine and condense code
 - Implement proper and complete logging (and comments)
 - Ensure thread safety
 - Vet the thread locking for deadlocks
 - Move variables from protected to private (were appropriate)
 - Ensure gracefull handling of failed ports (does not appear to work)

0.0.6 - Milestone 6 (Finish Dependant Handling):
 - Refine and condense code
 - Implement proper and complete logging (and comments)
 - Ensure thread safety
 - Vet the thread locking for deadlocks
 - Move variables from protected to private (were appropriate)
 - DependHandler:
   - Ensure _count is done properly
   - Have a dummy port for all stale ports
   - Do not do cyclic dependancy allocation (or move to late)
   - Check for cyclic dependancies
   - _verify:
     - Add caching of dependancies (no need to check them multiple times)

0.0.5 - Milestone 5 (Finish basic ports infrastructure):
 - Refine and condense code
 - Implement proper and complete logging (and comments)
 - Ensure thread safety
 - Vet the thread locking for deadlocks
 - Move variables from protected to private (were appropriate)
 - PortCache:
   - Minimise duplicate job requests
 - Port:
   - Add clean target (and have a failed port clean itself...)
   - Use batch mode for all stages except config
   - Precleaning
 - WorkerQueue:
   - Remove condition (not needed and overexposing internals)
 - make:
   - Have automatic logging of build commands (with archival)

0.0.4 - Milestone 4 (Command line controller):
 - pypkg:
   - Add ability to update/install ports (basic)
   - Allow environment variables to be settable (like ports_dir)
 - Create target to build INDEX
 * Port:
   * Implement proper cleaning
 * Rename TargetBuilder to StageBuilder
 * Move fetch_builder to subclassed of StageBuilder
 - Make config_builder API compatible with the other Builders
 - Create progress monitor for the build process (aka top mode)
 * Implement build logging for the ports
 * Rename all Popen return status to 'SUCCESS'
 * Rename ports to portcache
 * Implement proper thread/system shutdown
   * Create interrupt handlers
   * Create exit handlers
   * Provide easy interface for running main
 * Fix preparation for stages

0.0.3 - Milestone 3 (Target Builders):
 - Finish call documentation
 * Move type() checks to isinstance
 * Make sure all variable comments have a #:
 * Port:
   * Make thread safe
   * Getter for origin
   * Convert install status flags to linear
   * Convert stage status flags to linear
   * Move targets to queue (not build directly)
   * Fix filtering (for dependancies) [actually remove, missplaced]
   * Make depends return once competely initiated
   * _prepare:
     * Finish queue handling
     * Move to TargetBuilder
     * Fix resolving previous stages
 * DependHandler:
   * Make thread safe
   * Allow constructor to initialise dependancies
   * Rename to be more descriptive
   * Add getters for dependancies and dependants (ports and/or field)
 * WorkerQueue:
   * Add queue putter that returns once run
   * Remove logger (needed?)
   * put: If calling thread is one of our workers then execute it directly
   * Have all threads terminate on exit()
 * queue:
   * Add installer queue
 * make:
   * Rename pre_target to pre_cmd
   * Handle pipes properly
   * Add logging support (pipe redirection)
   * Allow disabling of pre_cmd
   * Condense functionality
 * Create ordering logic for building (and resolving dependants)
 * Remove make_target from global import
 * Fix PORTSDIR not having a trailing /

0.0.2 - Milestone 2 (Dependant Handler):
 * Port:
   * Complete attribute tables and fixes
   * Proper dependant handling (mimic what ports does)
     * Create class for depends
     * Late allocation (with a check that port is configged)
   * Create handlers for various make targets (stages):
     * config
       * Reget attr after configging
     * fetch
     * build
     * install
       * Notify all dependants of our success
   * Refracture startup code for stages
     * All previous stages build (without failure)
     * Handle stage depends
   * Refracture cleanup code for stages
 * ports:
   * Make ports_dir settable from the env
 * WorkerQueue:
   * Add Condition (and a global Condition)
   * Simplify function calling
 * make:
   * Add handler for environment variables
   * Generic handler for executing make targets

0.0.1 - Milestone 1 (Basic Port infrastructure):
 * Expand documentation for ports library
 * Add exception handling
 * Add logging
 * Add queueing logic
   * Filter multiple items (prevent duplicates?)
   * Handle different queue items (build, info)
 * Add a Port's cache (memory)
 * Port:
   * Add generic method for getting arbitrary items of information
   * Add port status
   * Add a port filter (for resolving information and calling dependants to be
     constructed)
 * Add a dependency resolver
 * Merge WorkerPool and Queue
 * WorkerQueue:
   * Allocate on demand
   * Terminate when idle
   * Re-size pool
   * Terminate if pool oversized
   * Check if global RLock could be a Lock
   * Add stats information
 * queue: Provide defaults for queue sizes
