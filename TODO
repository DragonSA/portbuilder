Coding standard:
 * Handle appropriate exceptions
 * Log all relevent events
 * Document all classes, methods, functions and (global|class) variables

Future release:
 - Speed up port_version()
 - Add options for either individually executing make targets or in baulk
 - Allow KeyboardInterrupt to terminate program
 - Check spelling for all documentation
 - Define working standards for logging
 - Increase level of logging
 - make:
   - Does make_target need env?
 - pypkg:
   - Add -n option (only display commands, don't execute anything)
   - Add -j option (fine tune concurrency)
 - Port:
   - Add distfiles checking (to optimise fetching)
   - Add caching for port information (with refreshing checks)
   - Handles ports that do not exist
   - Allow information collection from alternative sources
     (/var/db/pkg/* or portupgrade)
   - Add logging of port targets
   - Check need for status
   - Move prepare to a private method?
   - Attributes:
     - Check for a need of PATCHFILES
     - ALWAYS_KEEP_DISTFILES
     - Extend attributes for NO_*
     - FORBIDDEN, BROKEN and IGNORE
     - ONLY_FOR_ARCHS and NOT_FOR_ARCHS
     - DEPRECIATION...
     - etc
   - Check all attributes are correctly formatted:
     - Port categories
     - Naming scheme
   - config:
     - Check for caching of options (and add option to force config)
 - WorkerQueue:
    - Handle worker thread crashing

0.0.2:
 - Port:
   * Complete attribute tables and fixes
   + Implement proper dependant handling (mimic what ports does)
   + Create handlers for various make targets:
     * config
     + fetch
     - build
     - install
   - Refracture cleanup code for stages
 - pypkg:
   - Add ability to update/install ports (basic)
   - Allow environment variables to be settable (like ports_dir)
 * ports:
   * Make ports_dir settable from the env
 * WorkerQueue:
   * Add Condition (and a global Condition)
 * make:
   * Add handler for environment variables
   * Generic handler for executing make targets
 - Create ordering logic for building (and resolving dependants)
 - Create target to build INDEX

0.0.1:
 * Expand documentation for ports library
 * Add exception handling
 * Add logging
 * Add queueing logic
   * Filter multiple items (prevent duplicates?)
   * Handle different queue items (build, info)
 * Add a Port's cache
 * Port:
   * Add generic method for getting arbitrary items of information
   * Add port status
   * Add a port filter (for resolving information and calling dependants to be
     constructed)
 * Add a dependency resolver
 * Merge WorkerPool and Queue
 * WorkerQueue:
   * Allocate on demand
   * Terminate when idle
   * Re-size pool
   * Terminate if pool oversized
   * Check if global RLock could be a Lock
   * Add stats information
 * queue: Provide defaults for queue sizes
