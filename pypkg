#!/usr/bin/env python
"""
Controller for various ports operations
"""
from logging import getLogger, StreamHandler, DEBUG
from tools import run_main

handler = StreamHandler()
handler.setLevel(DEBUG)
getLogger('pypkg').addHandler(StreamHandler())
getLogger('pypkg.port.DependHandler').setLevel(DEBUG)

def main():
  """
     The main event loop.  This sets the program on the corrent trajectory and
     then exits.  Everything else just 'runs'
  """
  from make import env, pre_cmd
  from optparse import OptionParser
  from target import install_builder
  from threading import Thread

  usage = "usage: %prog [-inu] [-D variable] [variable=value] target ..."
  parser = OptionParser(usage, version="%prog 0.0.4")
  parser.add_option("-D", dest="make_env", action="append", metavar="variable",
                    default=[], help="Define the given variable for make (i.e."\
                    " add ``-D variable'' to the make calls.")
  parser.add_option("-i", "--install", action="store_true", default=True,
                    help="Install mode.  Installs the listed ports (and any " \
                    "dependancies required [default].")
  parser.add_option("-n", dest="no_opt", action="store_true", default=False,
                    help="Display the commands that would have been executed, "\
                    "but do not actually execute them.")
  parser.add_option("-p", "--package", action="store_true", default=False,
                    help="When installing ports, also generate packages (i.e." \
                    " do a ``make package''.")
  parser.add_option("-u", "--update", dest="install", action="store_false",
                    default=True, help="Update mode.  Updates the given port." \
                    "  The last -i or -u will be the determining one.")
  options, args = parser.parse_args()

  for i in options.make_env:
    env[i] = None
  for i in args[:]:
    if i.find('=') != -1:
      # TODO:  Make sure var, val take the correct values
      var, val = i.split('=', 1)
      env[var] = val
      args.remove(i)

  if options.no_opt:
    pre_cmd.insert(0, 'echo')

  if options.package:
    from port import Port
    Port.package = True

  for i in args:
    install_builder.put(i)

  if not options.no_opt:
    stats = Thread(target=statistics)
    stats.setDaemon(True)
    stats.start()

  return

def statistics():
  import queue
  import port
  import sys
  import target
  from time import sleep, time

  st = time()

  count = 0
  while True:
    sleep(1)
    count += 1
    if len(queue.config_queue):
      continue
    stdout = sys.stdout
    sys.stdout = sys.stderr
    if count % 20 == 1:
      print """
 Seconds | Port Cnt |    Fetch Cnt    |    Build Cnt    |   Install Cnt
         |          | Act Queue Total | Act Queue Total | Act Queue Total
---------+----------+-----------------+-----------------+-----------------"""
    print " %7i | %8i | %3i %5i %5i | %3i %5i %5i | %3i %5i %5i " % \
          (int(time() - st), len(port.port_cache), len(queue.fetch_queue),
           queue.fetch_queue.qsize(), len(target.fetch_builder),
           len(queue.build_queue), queue.build_queue.qsize(),
           len(target.build_builder), len(queue.install_queue),
           queue.install_queue.qsize(), len(target.install_builder))
    sys.stdout = stdout
    stdout.flush()

run_main(main)
